{"version":3,"sources":["Cell.js","Board.js","utils.js","Game.js","serviceWorker.js","index.js"],"names":["Cell","props","value","onClick","react_default","a","createElement","className","data-value","Board","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","winner","stepCounter","restartGame","_this$props","cells","map","cell","index","src_Cell","key","_this$props2","renderCells","renderResetButton","React","Component","getWinner","_winLines$filter","filter","comb","_comb","slicedToArray","b","c","winCombo","Game","_this","hendlerCells","_this$state","state","whoNext","toConsumableArray","setState","Array","fill","gameStatus","_this$state2","concat","src_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_Game","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.31349691.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Cell (props) {\r\n    const {value, onClick} = props;\r\n    return (\r\n        <div className=\"board-cell\" \r\n          data-value={value}\r\n          onClick = {onClick}>\r\n            {value}\r\n        </div>\r\n    ) \r\n}\r\n\r\nexport default Cell;","import React from \"react\";\nimport Cell from \"./Cell\";\nclass Board extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n  renderResetButton(winner, stepCounter) {\n    if (winner || stepCounter === 10) {\n      return (\n        <button className=\"resetGame\" onClick={this.props.restartGame}>\n          Restart Game\n        </button>\n      );\n    }\n  }\n  renderCells() {\n    const { cells, onClick } = this.props;\n    return cells.map((cell, index) => {\n      return (\n        <Cell\n          value={cell}\n          key={\"Cell -\" + index}\n          onClick={() => {\n            onClick(index);\n          }}\n        />\n      );\n    });\n  }\n\n  render() {\n    const {winner,stepCounter} = this.props;\n    return (\n      <div className=\"board\">\n        {this.renderCells()} {this.renderResetButton(winner, stepCounter)}\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","function getWinner(cells) {\n    const winLines = [\n        [0,1,2],\n        [3,4,5],\n        [6,7,8],\n        [0,3,6],\n        [1,4,7],\n        [2,5,8],\n        [0,4,8],\n        [2,4,6]\n    ]\n\n    let [winCombo] = winLines.filter(comb => {\n        let [a,b,c] = comb;\n        return cells[a] && cells[a] === cells[b] && cells[b] === cells[c];\n    })\n    if(winCombo) {\n        return cells[winCombo[0]]\n    }\n    // return ;\n}   \n\nexport default getWinner;","import React from \"react\";\nimport \"./App.css\";\nimport Board from \"./Board\";\nimport getWinner from \"./utils\";\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      cells: Array(9).fill(null),\n      stepCounter: 1,\n      whoNext: \"X\",\n      winner: null\n    };\n  }\n\n  hendlerCells = index => {\n    let { cells, whoNext, stepCounter, winner } = this.state;\n    cells = [...cells];\n    if (cells[index] || winner) {\n      return;\n    }\n    cells[index] = whoNext;\n    whoNext = whoNext === \"X\" ? \"0\" : \"X\";\n    stepCounter = stepCounter + 1;\n    winner = getWinner(cells);\n    this.setState({\n      cells,\n      whoNext,\n      stepCounter,\n      winner\n    });\n  };\n\n  restartGame = () => {\n    this.setState({\n      cells: Array(9).fill(null),\n      stepCounter: 1,\n      whoNext: \"X\",\n      winner: null\n    });\n  };\n\n  wichPlayerIs(whoNext) {\n    return whoNext === \"X\" ? \"X\" : \"0\";\n  }\n\n  render() {\n    const { cells, winner, whoNext, stepCounter } = this.state;\n    let gameStatus;\n    if (winner) {\n      gameStatus = `Player ${winner} wins!`;\n    } else if (stepCounter === 10) {\n      gameStatus = \"It is A DRAW!\";\n    } else {\n      gameStatus = `Player ${whoNext} your turn!`;\n    }\n    return (\n      <div className=\"wraper\">\n        <div className=\"Game\">\n          <h1>TIC TAC TOE</h1>\n          <h3>{gameStatus}</h3>\n          <Board\n            restartGame={this.restartGame}\n            cells={cells}\n            onClick={this.hendlerCells}\n            winner={winner}\n            stepCounter={stepCounter}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}